using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Collections;

namespace business
{
    public partial class FormKCSPPD1 : Form
    {
        private System.Data.SqlClient.SqlConnection sqlConn = new System.Data.SqlClient.SqlConnection();
        private System.Data.SqlClient.SqlCommand sqlComm = new System.Data.SqlClient.SqlCommand();
        private System.Data.SqlClient.SqlDataReader sqldr;
        private System.Data.SqlClient.SqlDataAdapter sqlDA = new System.Data.SqlClient.SqlDataAdapter();
        private System.Data.DataSet dSet = new DataSet();

        public string strConn = "";
        public string strSelect = "";

        public int intUserID = 0;
        public int intUserLimit = 0;
        public string strUserLimit = "";
        public string strUserName = "";
        public int intUserBM = 0;

        private int intKFID = 0;
        private int intCommID = 0;
        private int intClassID = 0;

        private ArrayList alKF = new ArrayList();

        private ClassGetInformation cGetInformation;

        private bool isSaved = false;
        
        public FormKCSPPD1()
        {
            InitializeComponent();
        }

        private void FormKCSPPD1_Load(object sender, EventArgs e)
        {
            int i;

            this.Top = 1;
            this.Left = 1;


            sqlConn.ConnectionString = strConn;
            sqlComm.Connection = sqlConn;
            sqlDA.SelectCommand = sqlComm;
            cGetInformation = new ClassGetInformation(strConn);

            sqlConn.Open();

            //初始化员工列表
            sqlComm.CommandText = "SELECT ID, 职员编号, 职员姓名 FROM 职员表 WHERE (beactive = 1)";

            if (dSet.Tables.Contains("职员表")) dSet.Tables.Remove("职员表");
            sqlDA.Fill(dSet, "职员表");
            comboBoxYWY.DataSource = dSet.Tables["职员表"];
            comboBoxYWY.DisplayMember = "职员姓名";
            comboBoxYWY.ValueMember = "ID";
            comboBoxYWY.Text = strUserName;

            //初始化部门列表
            comboBoxBM.SelectedIndexChanged -= comboBoxBM_SelectedIndexChanged;
            sqlComm.CommandText = "SELECT 部门名称 FROM 部门表 WHERE (beactive = 1)";

            if (dSet.Tables.Contains("部门表")) dSet.Tables.Remove("部门表");
            sqlDA.Fill(dSet, "部门表");
            //comboBoxBM.DataSource = dSet.Tables["部门表"];

            comboBoxBM.Items.Add("全部");
            for (i = 0; i < dSet.Tables["部门表"].Rows.Count; i++)
            {
                comboBoxBM.Items.Add(dSet.Tables["部门表"].Rows[i][0].ToString().Trim());
            }
            comboBoxBM.SelectedIndexChanged += comboBoxBM_SelectedIndexChanged;


            sqlConn.Close();

            string strDT;
            cGetInformation.getSystemDateTime();
            strDT = cGetInformation.strSYSDATATIME;
            labelZDRQ.Text = Convert.ToDateTime(strDT).ToString("yyyy年M月dd日");
            labelCZY.Text = strUserName;
        }

        private void comboBoxBM_SelectedIndexChanged(object sender, EventArgs e)
        {
            sqlConn.Open();
            //初始化员工列表
            if (comboBoxBM.Text.Trim() != "全部")
                sqlComm.CommandText = "SELECT 职员表.ID, 职员表.职员姓名, 职员表.职员编号 FROM 职员表 INNER JOIN 部门表 ON 职员表.部门ID = 部门表.ID WHERE (部门表.部门名称 = N'" + comboBoxBM.Text.Trim() + "') AND (职员表.beactive = 1)";
            else
                sqlComm.CommandText = "SELECT 职员表.ID, 职员表.职员姓名, 职员表.职员编号 FROM 职员表 INNER JOIN 部门表 ON 职员表.部门ID = 部门表.ID WHERE (职员表.beactive = 1)";

            sqldr = sqlComm.ExecuteReader();
            if (!sqldr.HasRows)
            {
                sqldr.Close();
                sqlConn.Close();
                return;
            }
            sqldr.Close();

            if (dSet.Tables.Contains("职员表")) dSet.Tables.Remove("职员表");
            sqlDA.Fill(dSet, "职员表");
            comboBoxYWY.DataSource = dSet.Tables["职员表"];
            comboBoxYWY.DisplayMember = "职员姓名";
            comboBoxYWY.ValueMember = "ID";
            sqlConn.Close();
        }

        private void textBoxPDKF_DoubleClick(object sender, EventArgs e)
        {
            /*
            if (cGetInformation.getKFInformation(1, "") == 0) //失败
            {
                return;
            }
            else
            {
                intKFID = cGetInformation.iKFNumber;
                textBoxPDKF.Text = cGetInformation.strKFCode;
                textBoxKFMC.Text = cGetInformation.strKFName;

                initdataGridViewDJMX();

            }
             */

            FormSelectKFList frmSelectKFList = new FormSelectKFList();
            frmSelectKFList.strConn = strConn;
            frmSelectKFList.ShowDialog();

            if (frmSelectKFList.bSEL)
            {
                textBoxKFMC.Text = "";
                alKF.Clear();
                for (int i = 0; i < frmSelectKFList.checkedListBoxKF.Items.Count; i++)
                {
                    if (frmSelectKFList.checkedListBoxKF.GetItemChecked(i))
                    {
                        alKF.Add(frmSelectKFList.alKF[i]);
                        textBoxKFMC.Text += " " + frmSelectKFList.checkedListBoxKF.Items[i];
                    }

                }
                initdataGridViewDJMX();
            }
        }

        private void initdataGridViewDJMX()
        {


            if (alKF.Count == 0) //没有库房
            {
                if (dSet.Tables.Contains("单据表")) dSet.Tables.Remove("单据表");
                return;
            }

            int i,j,k;
             decimal fCSum = 0, fSum = 0;


             strSelect = "SELECT 商品表.商品编号, 商品表.商品名称, 商品表.商品规格, 库存表.库存数量 AS 结存数量, 库存表.库存数量*库存表.库存成本价 AS 结存金额, 库存盘点定义表.备注, 库存表.商品ID, 库存表.库房ID, 库房表.库房名称 FROM 库存表 INNER JOIN 商品表 ON 库存表.商品ID = 商品表.ID INNER JOIN 库房表 ON 库存表.库房ID = 库房表.ID CROSS JOIN 库存盘点定义表 WHERE (商品表.beactive = 1) ";

            for (i = 0; i < alKF.Count; i++)
            {
                if(i==0)
                    strSelect += " AND ((库存表.库房ID = " + alKF[i].ToString() + ")";
                else
                    strSelect += " OR (库存表.库房ID = " + alKF[i].ToString() + ")";
            }
            strSelect += ")";

            if (intCommID != 0) //商品过滤
            {
                strSelect += " AND (库存表.商品ID = "+intCommID.ToString()+")";
            }

            if (intClassID != 0) //商品分类过滤
            {
                strSelect += "  AND (商品表.分类编号 = "+intClassID.ToString()+")";
            }
            sqlConn.Open();
          
            sqlComm.CommandText = strSelect;

            if (dSet.Tables.Contains("单据表")) dSet.Tables.Remove("单据表");
            sqlDA.Fill(dSet, "单据表");
            dataGridViewDJMX.DataSource = dSet.Tables["单据表"];
            sqlConn.Close();
            
            
            dataGridViewDJMX.Columns[6].Visible = false;
            dataGridViewDJMX.Columns[7].Visible = false;

            dataGridViewDJMX.Columns[4].Visible = false;


            dataGridViewDJMX.Columns[0].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            dataGridViewDJMX.Columns[1].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            dataGridViewDJMX.Columns[2].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            dataGridViewDJMX.Columns[3].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            dataGridViewDJMX.Columns[4].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            dataGridViewDJMX.Columns[5].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            dataGridViewDJMX.Columns[6].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;

            fCSum = 0; fSum = 0;
            for (i = 0; i < dSet.Tables["单据表"].Rows.Count; i++)
            {
                if (dSet.Tables["单据表"].Rows[i][3].ToString() == "")
                    dSet.Tables["单据表"].Rows[i][3] = 0;

                if (dSet.Tables["单据表"].Rows[i][4].ToString() == "")
                    dSet.Tables["单据表"].Rows[i][4] = 0;

                fCSum += Convert.ToDecimal(dSet.Tables["单据表"].Rows[i][3]);
                fSum += Convert.ToDecimal(dSet.Tables["单据表"].Rows[i][4]);
            }
            labelSLHJ.Text = Convert.ToInt32(fCSum).ToString();
            labelJEHJ.Text = fSum.ToString();
            toolStripStatusLabelMXJLS.Text = dSet.Tables["单据表"].Rows.Count.ToString();
        }





        private void saveToolStripButton_Click(object sender, EventArgs e)
        {
            int i, j;

            //保存完毕
            if (isSaved)
            {
                MessageBox.Show("库存盘点表已经保存,单据号为：" + labelDJBH.Text, "提示", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }

            if (alKF.Count == 0)
            {
                MessageBox.Show("请选择商品库房", "提示", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (dataGridViewDJMX.RowCount <1)
            {
                MessageBox.Show("没有盘点商品", "提示", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }


            if (MessageBox.Show("请检查库存盘点表内容,该制单内容不可更改，是否继续保存？", "提示", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.No)
                return;

            saveToolStripButton.Enabled = false;
            string strCount = "", strDateSYS = "", strKey = "CPD";
            System.Data.SqlClient.SqlTransaction sqlta;
            sqlConn.Open();
            sqlta = sqlConn.BeginTransaction();
            sqlComm.Transaction = sqlta;
            try
            {
                //得到表单号
                //得到服务器日期
                sqlComm.CommandText = "SELECT GETDATE() AS 日期";
                sqldr = sqlComm.ExecuteReader();

                while (sqldr.Read())
                {
                    strDateSYS = Convert.ToDateTime(sqldr.GetValue(0).ToString()).ToShortDateString();
                }
                sqldr.Close();

                //得到日期
                sqlComm.CommandText = "SELECT 时间 FROM 表单计数表 WHERE (时间 = CONVERT(DATETIME, '" + strDateSYS + " 00:00:00', 102))";
                sqldr = sqlComm.ExecuteReader();

                if (sqldr.HasRows)
                    sqldr.Close();
                else //服务器时间不吻合
                {
                    sqldr.Close();
                    //修正日期及计数器
                    sqlComm.CommandText = "UPDATE 表单计数表 SET 时间 = '" + strDateSYS + "', 计数 = 1";
                    sqlComm.ExecuteNonQuery();
                }

                //得到计数器
                sqlComm.CommandText = "SELECT 计数 FROM 表单计数表 WHERE (关键词 = N'" + strKey + "')";
                sqldr = sqlComm.ExecuteReader();
                if (sqldr.HasRows)
                {
                    sqldr.Read();
                    strCount = sqldr.GetValue(0).ToString();
                    sqldr.Close();

                    //增加计数器
                    sqlComm.CommandText = "UPDATE 表单计数表 SET 计数 = 计数 + 1 WHERE (关键词 = N'" + strKey + "')";
                    sqlComm.ExecuteNonQuery();
                }
                else
                    sqldr.Close();

                if (strCount != "")
                {
                    strCount = string.Format("{0:D3}", Int32.Parse(strCount));
                    strCount = strKey.ToUpper() + Convert.ToDateTime(strDateSYS).ToString("yyyyMMdd") + strCount;
                }
                else
                {
                    MessageBox.Show("数据错误", "提示信息", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    sqlConn.Close();
                    return;
                }

                //表单汇总
                sqlComm.CommandText = "INSERT INTO 库存盘点汇总表(单据编号, 日期, 业务员ID, 操作员ID, 盘点标记, 备注, 库房ID, 商品ID, 分类ID, 数量合计, 金额合计, 盘损数量合计, 盘损金额合计, BeActive) VALUES (N'" + strCount + "', '" + strDateSYS + "', " + comboBoxYWY.SelectedValue.ToString() + ", " + intUserID.ToString() + ", 0, N'" + textBoxBZ.Text.Trim() + "', " + intKFID.ToString() + ", " + intCommID.ToString() + ", " + intClassID.ToString() + ", " + labelSLHJ.Text + ", " + labelJEHJ.Text + ", 0, 0, 1)";
                sqlComm.ExecuteNonQuery();


                //取得单据号 
                sqlComm.CommandText = "SELECT @@IDENTITY";
                sqldr = sqlComm.ExecuteReader();
                sqldr.Read();
                string sBillNo = sqldr.GetValue(0).ToString();
                sqldr.Close();

                //单据明细
                for (i = 0; i < dataGridViewDJMX.Rows.Count; i++)
                {
                    if (dataGridViewDJMX.Rows[i].IsNewRow)
                        continue;

                    sqlComm.CommandText = "INSERT INTO 库存盘点明细表 (单据ID, 商品ID, 结存数量, 结存金额, 实盘数量, 备注, 盘点标志,库房ID) VALUES (" + sBillNo + ", " + dataGridViewDJMX.Rows[i].Cells[6].Value.ToString() + ", " + dataGridViewDJMX.Rows[i].Cells[3].Value.ToString() + ", " + dataGridViewDJMX.Rows[i].Cells[4].Value.ToString() + ", 0, N'" + dataGridViewDJMX.Rows[i].Cells[5].Value.ToString() + "', 0, " + dataGridViewDJMX.Rows[i].Cells[7].Value.ToString() + ")";
                    sqlComm.ExecuteNonQuery();
                }





                sqlta.Commit();
            }
            catch (Exception ex)
            {
                MessageBox.Show("数据库错误：" + ex.Message.ToString(), "数据库错误", MessageBoxButtons.OK, MessageBoxIcon.Error);
                sqlta.Rollback();
                saveToolStripButton.Enabled = true;
                return;
            }
            finally
            {
                sqlConn.Close();
            }

            //MessageBox.Show("库存盘点表保存成功", "提示信息", MessageBoxButtons.OK, MessageBoxIcon.Information);
            labelDJBH.Text = strCount;
            this.Text = "库存盘点表：" + labelDJBH.Text;
            isSaved = true;
            if (MessageBox.Show("库存盘点表保存成功，是否继续开始另一份单据？", "提示信息", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
            {
                MDIBusiness mdiT = (MDIBusiness)this.MdiParent;
                mdiT.准备盘点表AToolStripMenuItem_Click(null, null);
            }


            if (MessageBox.Show("是否关闭制单窗口", "提示信息", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
            {
                this.Close();
            }


        }

        private void FormKCSPPD1_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (isSaved)
            {
                return;
            }

            DialogResult dr = MessageBox.Show(this, "单据尚未保存，确定要退出吗？", "提示", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (dr != DialogResult.Yes)
            {
                e.Cancel = true;
            }
            else
            {
                e.Cancel = false;
            }
        }

        private void printToolStripButton_Click(object sender, EventArgs e)
        {

            string strT = "库存盘点表(单据编号:" + labelDJBH.Text + ");制单日期：" + labelZDRQ.Text + ";业　务员：" + comboBoxYWY.Text + ";库房名称：" + textBoxKFMC.Text +";数量合计："+labelSLHJ.Text+";金额合计："+labelJEHJ.Text;
            PrintDGV.Print_DataGridView(dataGridViewDJMX, strT, false, intUserLimit);
        }

        private void printPreviewToolStripButton_Click(object sender, EventArgs e)
        {
            string strT = "库存盘点表(单据编号:" + labelDJBH.Text + ");制单日期：" + labelZDRQ.Text + ";业　务员：" + comboBoxYWY.Text + ";库房名称：" + textBoxKFMC.Text + ";数量合计：" + labelSLHJ.Text + ";金额合计：" + labelJEHJ.Text;
            PrintDGV.Print_DataGridView(dataGridViewDJMX, strT, true, intUserLimit);
        }



        private void textBoxSPLB_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return)
            {
                if (cGetInformation.getClassInformation(20, textBoxSPLB.Text) == 0) //失败
                {
                    textBoxSPLB.Text = "";
                    intClassID = 0;
                }
                else
                {
                    intClassID = cGetInformation.iClassNumber;
                    textBoxSPLB.Text = cGetInformation.strClassName;
                }
                initdataGridViewDJMX();
            }
        }

        private void textBoxSPMC_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return)
            {

                if (cGetInformation.getCommInformation(10, textBoxSPMC.Text) == 0) //失败
                {
                    textBoxSPMC.Text = "";
                    intCommID = 0;
                }
                else
                {
                    intCommID = cGetInformation.iCommNumber;
                    textBoxSPMC.Text = cGetInformation.strCommName;

                }
                initdataGridViewDJMX();
            }
        }

    }
}